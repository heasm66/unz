'ToDo:
' * Disassemble
' OK     - Three different syntaxes
' OK          -a0 TXD default (default)
' OK          -a2 ZAPF
'     - Write object description for objects in parentesis if lookup is missing
'     - two-complement values for constants
' * Decompile grammar for both Inform & ZIL syntax.
' OK     - ZIL 1 (Zork 1-3,...)
' OK     - ZIL 2 (New parser)
' OK     - INF 1 (Inform -5, action and pre-action (parser) of same length)
' OK     - INF 1 (Inform 6 action and parser table of different length
' OK     - INF 2 (Inform 6)
'     - ZIL 2 for z3
'     - DLG
' * Format properties ZIL/Inform
'     - Identify static values (word that are not routine, string, dict-word or pointing to "Data Fragment")
' * Allow a lookup-file that translates to real names for properties, attributes, routines and more
' * Properties ZIL:
'     - Identify THINGS, see format in pseudo.zil (zillib)
'     - ERROR: Trinity, SEE-N and similiar properties. List objects but same size.      
'     - ERROR: Trinity, VALUES are bigger than 255
'     - ERROR: Craverly_Heights_Zil, PRONOUNS
'     - ERROR: Craverly_Heights_Zil, GLOBAL. List objects but same size.
'     - Ambiguity?
' * Be consitent with decimal numbers and hex numbers
' OK * Abbreviation table: print decoded data
' * Unify hexdump for object tree table and object properties tables
' OK * Switch to turn on/off hexdump, ex (-d or -nohex)
' * WinForms-variant
'     - Details of opcodes and operands 
'     - Links to routines
'     - Name properties, attributes, objects and globals
' OK * Export only text to a gametext.txt format
' OK      G   Inline text
' OK      H   High string
' OK      I   Info
' OK      O   Object description
' OK * OK Switch to disassemble single routine
' OK -a                abbreviations
' OK -d                dictionary
' OK -f                full (default)
' OK -g                grammar
' OK -i                header
' OK -m                memory map
' OK -o                objects
' OK -s                strings
' OK -u                unidentified
' OK -v                variables
' OK -x                extra (terminiating characters, )
' OK -z                z-code
' OK -z <address>      decode one routine
' OK --syntax 0/txd    TXD default (default)
' OK         1/inform TXD alternative (txd -a)
' OK          2/zap    ZAP
' OK --hexdump         
' OK --gametext        creates a 'gametext.txt'
' OK * Collect list of used globals from z-code
' OK * Collect list of potential array-starts from z-code, globals & properties
' * There's a slight difference between grammar tables for Zilch-compiled? and Zilf-compiled. This
'   can be used to differentiate them apart.
' OK * switch to show/hide how abbreviations are applied (default = show).
' * Decompile to some sort of pseudo-code. if..then..else, for..next, switch... instead of branching.
' OK *Identify/print COMPACT-SYNTAX for ZIL, version 1 (mini1, mini2 & Sherlock
' OK * Print synonyms in preposition table
' OK * Action & preaction table for Zil, ver 1
' OK * Identify IFID-GUID
' OK * Suspended, Zilch - Unidentified data at start of high memory?
' OK * AMFV, Zilch - Unidentified data at start of high memory?
' OK * Print start of Dynamic, Static and High memory
' OK * Split grammar tables
' OK * Convert 1-7 00 bytes, depending of version, before first z-code to padding
' OK * Grammar table data wrongly formatted for Infoerm, ver 2
' OK * Action table, missing last action for Inform, ver 2
' * Add small explaination to each section, maybe only in help
* OK Collect all calls to routines from properties and action/preaction and list them in routine header.
* Collect potential array-starts from properties.
* Analyze and print arrays recursive
* Determine type of property by analyzing all (string, z-routine, dictword, array, object, value)
* Determine type of array by analyzing all (string, z-routine, dictword, array, object, value)
* Object 1-4 can never use custom alphabet. Identify description-bytes and always set Class, Object, Routine...
* Decode GV3.
* OK Handle no-verbs warnings files that contains number_oF_grammar_lines=0, see minimal_642.z5


0.10 2024-02-17
---------------
  * Initial commit.
  
0.11 2024-02-18
---------------
  * Minor bug fixes and error handling.
  * Handle corrupt adjective table (Curses_r7) for Inform5_ver1 grammar.

0.12 2024-02-24
---------------
  * Call without options or file prints help (same as -h).
  * Cosmetic changes to printing in the objects section.
  * List calls from property, action and preaction/parsing in 
    z-code routine header.
  * List possible startingpoint for arrays in "undentified data",
    collected from opcodes loadb, loadw, storeb, storew and globals.
	
0.13 2024-xx-xx
---------------
  * Fixed bug that couldn't handle "no-verb" with 0 number_of_grammar_lines
    in Inform_GV2.
  * Handle grammar version 3.
  * Handle unicode translation table.
  * Identify old compiled files right (old Infocom files with wrongly formatted serial).
  * Accept files with no abbreviation tables.
